@page "/groups/{GroupName}"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client;
@using ChatApp.Client.Models;

<body class="page container">
    <h3 class="text-white">@GroupName</h3>

    <div class="messages-container">

        <div class="group-page">
            @foreach(var message in messages)
            {
                <div class="message-style text-break">
                    @message.Text

                    <small class="text-muted">6:58 pm</small>
                </div>
                <br />
            }
        </div>

    </div>

    <div class="input-group mb-3 container py-2">
        <input type="text" class="form-control text-area-style" placeholder="Write a message..." aria-label="Write a message..." aria-describedby="button-send" @bind="message">
        <button class="btn btn-outline-secondary" type="button" id="button-send" @onclick="SendMessage">
            <img class="send-icon" src="icons/send-icon.png" />
        </button>
    </div>
</body>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    [Parameter]
    public string GroupName { get; set; }

    public string UserName { get; set; }
    private string? message { get; set; }
    private List<Message> messages = new List<Message>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7183/chathub",
                    options => options.AccessTokenProvider = () => Task.FromResult(AuthenticationState.Token))
                .Build();

            hubConnection.On<string, Message>("NewMessage", GetMessage);

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinGroup", GroupName);

            messages = await Http.GetFromJsonAsync<List<Message>>($"https://localhost:7183/api/Messages/groups/{GroupName}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void GetMessage(string id, Message message)
    {
        messages.Add(message);
        UserName = id;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.InvokeAsync(
                methodName: "SendMessageToGroup",
                GroupName,
                message ?? "...Empty message...");
        }
        else
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7183/chathub")
                .Build();

            await hubConnection.InvokeAsync(
                methodName: "SendMessageToGroup",
                GroupName,
                message ?? "...Empty message...");
        }
    }
}
