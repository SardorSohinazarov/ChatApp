@page "/groups/{GroupName}"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client;
@using ChatApp.Client.Models;
<h3>Group</h3>


@* @foreach (var _message in messages)
{
    if(_message.SenderName == UserName)
    {
        <MudAvatar Color="Color.Success">
            @_message.SenderName[0]
        </MudAvatar>
    }
    else
    {
        <MudAvatar Color="Color.Info" Variant="Variant.Outlined">
            @_message.SenderName[0]
        </MudAvatar>
    }

    <MudChip Color="Color.Info" >
        <MudText>
            @_message.Text
        </MudText>
    </MudChip>

    <br />
}

<br />

<Row Style="display:flex">
    <MudTextField Style="width: 95%" Label="Write a message ..." Variant="Variant.Filled" Clearable="false" Immediate="true" T="string" @bind-Value="message"></MudTextField>
    <MudIconButton Style="width:5%" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage">Send</MudIconButton>
</Row> *@

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    [Parameter]
    public string GroupName { get; set; }

    public string UserName { get; set; }
    private string? message { get; set; }
    private List<Message> messages = new List<Message>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7183/chathub",
                    options => options.AccessTokenProvider = () => Task.FromResult(AuthenticationState.Token))
                .Build();

            hubConnection.On<string, Message>("NewMessage", GetMessage);

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinGroup", GroupName);

            messages = await Http.GetFromJsonAsync<List<Message>>(
                $"https://localhost:7183/api/Messages/groups/{GroupName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void GetMessage(string id, Message message)
    {
        messages.Add(message);
        UserName = id;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.InvokeAsync(
                methodName: "SendMessageToGroup",
                GroupName,
                message ?? "...Empty message...");
        }
        else
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7183/chathub")
                .Build();

            await hubConnection.InvokeAsync(
                methodName: "SendMessageToGroup",
                GroupName,
                message ?? "...Empty message...");
        }
    }
}
