@page "/";
@using ChatApp.Client.Models.DTOs;
@using Newtonsoft.Json;
@inject NavigationManager navigationManager;
@inject HttpClient httpClient;
@inject IJSRuntime JSRuntime;

<PageTitle>Login</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-lg-4 col-md-3 col-sm-2"></div>
        <div class="col-lg-4 col-md-6 col-sm-8">
            <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
                <div class="card br-0 mt-5">
                    <div class="card-header bg-main br-0">
                        <h2 class="text-white mb-0">Blazing Chat - Login</h2>
                    </div>
                    <div class="card-body">
                        <DataAnnotationsValidator />
                        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                        {
                            <p class="text-danger">@ErrorMessage</p>
                        }
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="loginDTO.UserName" DisplayName="Username" class="form-control" placeholder="Enter username" />
                            <ValidationMessage For="() => loginDTO.UserName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="loginDTO.Password" DisplayName="Password" class="form-control" placeholder="Enter password" />
                            <ValidationMessage For="() => loginDTO.Password" />
                        </div>
                    </div>
                    <div class="card-footer">
                        <NavLink href="register" class="btn btn-outline-primary float-start">Register</NavLink>

                        @if (_isBusy)
                        {
                            <button class="btn btn-success float-end" type="button" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Loading...
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success float-end">Login</button>
                        }


                        <div class="clearfix"></div>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-4 col-md-3 col-sm-2"></div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState _authenticationState { get; set; }

    private LoginUserDTO loginDTO { get; set; } = new LoginUserDTO();
    private bool _isBusy = false;
    private string? ErrorMessage = null;

    private async Task LoginAsync()
    {
        try
        {
            _isBusy = true;
            var response = await httpClient.PostAsJsonAsync<LoginUserDTO>("https://localhost:7183/api/Account/login", loginDTO);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var auth = JsonConvert.DeserializeObject<AuthResponseDTO>(content);
                _authenticationState.LoadState(auth);
                await JSRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, JsonConvert.SerializeObject(auth));
                navigationManager.NavigateTo("/groups");
            }
            else
            {
                _isBusy = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            _isBusy = false;
        }
    }
}
