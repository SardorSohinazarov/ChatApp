@page "/";
@using ChatApp.Client.Models.DTOs;
@using Newtonsoft.Json;
@inject NavigationManager navigationManager;
@inject HttpClient httpClient;
@inject IJSRuntime JSRuntime;

<PageTitle>Login</PageTitle>

<div class="container">
    <div class="row">

        <div class="col">

            <h2>Chat Login</h2>
            <hr />

            <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">

                <DataAnnotationsValidator />

                @if (string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <p class="text-danger">@ErrorMessage</p>
                }

                <div class="mb-3">
                    <InputText @bind-Value="loginDTO.UserName" DisplayName="Username" class="form-control" placeholder="Enter Username" />
                    <ValidationMessage For="()=> loginDTO.UserName" />
                </div>

                <div class="mb-3">
                    <InputText type="password" @bind-Value="loginDTO.Password" DisplayName="Password" class="form-control" placeholder="Enter Password" />
                    <ValidationMessage For="()=> loginDTO.Password" />
                </div>

                <div class="mb-3">
                    @if (_isBusy)
                    {
                        <button class="btn btn-success" type="button" disabled>
                            <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                            <span role="status">Loading...</span>
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success">
                            Login
                        </button>
                    }
                    <NavLink href="register" class="btn btn-outline-primary float-end">Register</NavLink>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState _authenticationState { get; set; }

    private LoginUserDTO loginDTO { get; set; } = new LoginUserDTO();
    private bool _isBusy = false;
    private string? ErrorMessage = null;

    private async Task LoginAsync()
    {
        try
        {
            _isBusy = true;
            var response = await httpClient.PostAsJsonAsync<LoginUserDTO>("https://localhost:7183/api/Account/login", loginDTO);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var auth = JsonConvert.DeserializeObject<AuthResponseDTO>(content);
                _authenticationState.LoadState(auth);
                await JSRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, JsonConvert.SerializeObject(auth));
                navigationManager.NavigateTo("/groups");
            }
            else
            {
                _isBusy = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            _isBusy = false;
        }
    }
}
