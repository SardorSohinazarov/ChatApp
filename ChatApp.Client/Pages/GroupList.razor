@page "/groups";
@using ChatApp.Client.Models;
@inject HttpClient Http;
@using System.Security.Claims;
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager;

<h3>GroupList</h3>

@if(_groups is null)
{
    <p>Empty</p>
}
else
{
    @foreach(var group in _groups)
    {
        var groupLink = $"/groups/{group.ChatLink}";
            <p>
                <a href=@groupLink class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">
                    @group.FirstName
                </a>
            </p>
        <br />
    }
}

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState _authenticationState { get; set; }

    private List<User> _groups = new List<User>();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!_authenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }

        try
        {
            string token = _authenticationState.Token;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var groupsTask = Http.GetFromJsonAsync<List<User>>("https://localhost:7183/api/Users");

            var listOfGroups = await groupsTask;

            if(listOfGroups is not null)
            {
                _groups = listOfGroups;
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user groups: {ex.Message}");
        }
    }

    private HttpClient GetClient()
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _authenticationState.Token);
        return Http;
    }

}
