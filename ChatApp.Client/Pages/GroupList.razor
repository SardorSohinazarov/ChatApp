@page "/groups";
@using ChatApp.Client.Models;
@inject HttpClient Http;
@using System.Security.Claims;
@using System.Net.Http.Headers;
@using ChatApp.Client.Models.ViewModels;
@inject NavigationManager NavigationManager;

<body class="groupList-page">
    <h3 class="text-center text-white">GroupList</h3>

    <table class="table container">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Username</th>
                <th scope="col">Phone number</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in _groups)
            {
            var groupLink = $"/groups/{group.ChatLink}";
                        
            <tr>
                <td>
                    <a href="@groupLink">
                        @group.FirstName @group.LastName
                    </a>
                </td>
                <td>
                    @group.UserName

                </td>
                <td>
                    @group.PhoneNumber
                </td>
            </tr>
            }
        </tbody>
    </table>
</body>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState _authenticationState { get; set; }

    private List<UserViewModel> _groups = new List<UserViewModel>();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!_authenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");

        }
        else
        {
            try
            {
                string token = _authenticationState.Token;
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var groupsTask = Http.GetFromJsonAsync<List<UserViewModel>>("https://localhost:7183/api/Users");

                var listOfGroups = await groupsTask;

                if(listOfGroups is not null)
                {
                    _groups = listOfGroups;
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading user groups: {ex.Message}");
            }
        }
    }
}
