@using ChatApp.Web.Models.DTOs;
@using ChatApp.Web.States;
@using Newtonsoft.Json;
@using System.ComponentModel;
@inherits LayoutComponentBase;
@inject IJSRuntime JSRuntime;
@implements IDisposable;
@inject NavigationManager navigatorManager;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="AuthenticationState" Name="AuthenticationState">
    <div class="page">
        @Body
    </div>
</CascadingValue>

@code {
    bool open;

    void ToggleDrawer()
    {  
        open = !open;
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public AuthenticationState AuthenticationState { get; set; } = new AuthenticationState();

    public const string AuthStoreKey = "authKey";

    protected async override Task OnInitializedAsync()
    {
        var authStateJson = await JSRuntime.InvokeAsync<string>("window.getFromStorage", AuthenticationState.AuthStoreKey);

        if (!string.IsNullOrWhiteSpace(authStateJson))
        {
            var authState = JsonConvert.DeserializeObject<AuthResponseDTO>(authStateJson);

            AuthenticationState.LoadState(authState);

            if (AuthenticationState.IsAuthenticated)
            {
                navigatorManager.NavigateTo("/chat");
            }
        }

        AuthenticationState.PropertyChanged += AuthenticationStateChanged;
    }

    private void AuthenticationStateChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AuthenticationState.IsAuthenticated))
        {
            if (AuthenticationState.IsAuthenticated)
            {
                navigatorManager.NavigateTo("/chat");
            }
            else
            {
                navigatorManager.NavigateTo("/");
            }
        }
    }

    public async Task HandleLogout()
    {
        await JSRuntime.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
        navigatorManager.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthenticationState.PropertyChanged -= AuthenticationStateChanged;
    }
}